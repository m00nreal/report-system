{"version":3,"sources":["ColorModeSwitcher.tsx","components/ReportInfo.tsx","components/RoleModal.tsx","components/Roles.tsx","App.tsx","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","ReportInfo","discordTag","nickname","warnReason","roles","warnEnd","txtAreaRef","React","mt","alignItems","display","mb","width","navigator","clipboard","writeText","current","value","trim","alignSelf","colorScheme","marginBottom","ref","length","map","t","p","height","focusBorderColor","readOnly","RoleModal","isOpen","onClose","onOpen","setRoles","role","setRole","addButton","includes","toLowerCase","old","onSubmit","e","preventDefault","id","isRequired","fontWeight","textAlign","type","onChange","target","autoFocus","mr","Roles","selectedRoles","setSelectedRoles","storageRoles","storage","localStorage","getItem","JSON","parse","useDisclosure","setItem","stringify","direction","justifyContent","w","my","rounded","Add","flexDir","flexWrap","pr","children","filter","console","log","cursor","userSelect","App","setValue","setDiscordTag","setNickname","fecha","setFecha","theme","justifySelf","placeholder","onFocus","undefined","inputValue","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.304c8cc2.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import { Button, Stack, Textarea } from \"@chakra-ui/react\";\nimport * as React from \"react\";\n\ninterface Props {\n  discordTag: string;\n  nickname?: string;\n  warnReason: string;\n  roles?: string[];\n  warnEnd: string;\n}\n\nconst ReportInfo = ({\n  discordTag = \"\",\n  nickname = \"\",\n  warnReason = \"\",\n  roles = [],\n  warnEnd = \"\",\n}: Props) => {\n  const txtAreaRef = React.useRef<any>();\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(txtAreaRef.current.value.trim());\n  };\n\n  return (\n    <Stack mt=\"6\" alignItems=\"center\" display=\"flex\" mb=\"6\">\n      <Button\n        size=\"lg\"\n        width=\"50%\"\n        onClick={copyToClipboard}\n        alignSelf=\"center\"\n        colorScheme=\"green\"\n        marginBottom=\"6\"\n      >\n        Copiar\n      </Button>\n      <Textarea\n        ref={txtAreaRef}\n        size=\"lg\"\n        value={`\n**-Nombre de usuario en discord y nickname:** @${discordTag} | ${nickname ? nickname : 'N/A'}\\n\n**-Razón por la cuál se está muteando:** ${warnReason}\\n\n**-Roles que tenía:** ${roles.length > 0 ? roles.map((t) => ` ${t}`) : 'Sin roles'}\\n\n**-Hora y fecha en que termina su sanción:** \\`\\`${warnEnd}\\`\\`\\n\n**-Evidencia de lo que hizo y/o foto de perfil:** \\n\n`}\n        variant=\"filled\"\n        p=\"4\"\n        height=\"350\"\n        width=\"80%\"\n        focusBorderColor=\"#333\"\n        readOnly\n      />\n    </Stack>\n  );\n};\n\nexport default ReportInfo;\n","import * as React from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  FormControl,\n  FormLabel,\n  Input,\n} from \"@chakra-ui/react\";\n\ninterface Props {\n  isOpen: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  setRoles?: any;\n  roles: string[];\n}\n\nconst RoleModal = ({ isOpen, onOpen, onClose, setRoles, roles }: Props) => {\n  const [role, setRole] = React.useState(\"\");\n\n  const onRoleAdd = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    addButton();\n  };\n\n  const addButton = () => {\n    if (role === \"\") return;\n    if (roles.includes(role.toLowerCase())) return;\n    setRoles((old: string[]) => [...old, role]);\n    setRole(\"\");\n  };\n\n  const onModalClose = () => {\n    setRole(\"\");\n    onClose();\n  };\n  return (\n    <>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Agregar Nuevo Rol</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <form onSubmit={onRoleAdd}>\n              <FormControl id=\"roleName\" width=\"100%\" isRequired>\n                <FormLabel\n                  fontWeight=\"bold\"\n                  fontSize=\"1.5rem\"\n                  textAlign=\"center\"\n                >\n                  Nombre del Rol\n                </FormLabel>\n                <Input\n                  type=\"text\"\n                  value={role}\n                  onChange={(e) => setRole(e.target.value)}\n                  // onSubmit={onRoleAdd}\n                  autoFocus\n                />\n              </FormControl>\n            </form>\n          </ModalBody>\n          <ModalFooter>\n            <Button colorScheme=\"blue\" mr={3} onClick={onModalClose}>\n              Cerrar\n            </Button>\n            <Button\n              variant=\"solid\"\n              colorScheme=\"green\"\n              onClick={addButton}\n              type=\"submit\"\n            >\n              Agregar Rol\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default RoleModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport {\n  Badge,\n  VStack,\n  Text,\n  Stack,\n  Button,\n  useDisclosure,\n  Box,\n} from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport { SetStateAction } from \"react\";\nimport RoleModal from \"./RoleModal\";\n\ninterface Props {\n  selectedRoles: string[];\n  setSelectedRoles: React.Dispatch<SetStateAction<string[]>>;\n}\n\nconst Roles = ({selectedRoles, setSelectedRoles}: Props) => {\n  const [roles, setRoles] = React.useState<string[]>(() => {\n    let storageRoles = [];\n    const storage = localStorage.getItem(\"roles\");\n    if (storage) {\n      storageRoles = JSON.parse(storage);\n    }\n    return storageRoles;\n  });\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  React.useEffect(() => {\n    localStorage.setItem(\n      \"roles\",\n      JSON.stringify(roles.map((t) => t.toLowerCase()))\n    );\n  }, [roles]);\n\n  const onRoleClick = (role: string) => {\n    if (selectedRoles.includes(role)) {\n      setSelectedRoles((old) => old.filter((t) => t !== role));\n    } else {\n      setSelectedRoles((old) => [...old, role]);\n    }\n    console.log(selectedRoles);\n  };\n\n  return (\n    <VStack width=\"50%\" alignItems=\"flex-start\">\n      <Stack\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"space-between\"\n        w=\"100%\"\n      >\n        <Text my=\"8px\" fontWeight=\"bold\" fontSize=\"1.5rem\">\n          Roles del usuario \n        </Text>\n        <Button rounded=\"full\" size=\"sm\" colorScheme=\"green\" onClick={onOpen}>\n          <AddIcon />\n        </Button>\n      </Stack>\n      <Stack width=\"100%\">\n        <Box display=\"flex\" flexDir=\"row\" flexWrap=\"wrap\">\n          {roles.map((t) => (\n            <Box pr=\"2\" alignItems=\"center\" justifyContent=\"center\">\n              <Badge\n                children={t}\n                key={t}\n                variant={selectedRoles.includes(t) ? \"solid\" : \"outline\"}\n                colorScheme=\"green\"\n                onClick={() => onRoleClick(t)}\n                cursor=\"pointer\"\n                userSelect=\"none\"\n              />\n            </Box>\n          ))}\n        </Box>\n      </Stack>\n      <RoleModal\n        isOpen={isOpen}\n        onOpen={onOpen}\n        onClose={onClose}\n        roles={roles}\n        setRoles={setRoles}\n      />\n    </VStack>\n  );\n};\n\nexport default Roles;\n","import * as React from \"react\";\nimport {\n  ChakraProvider,\n  Box,\n  Text,\n  Grid,\n  theme,\n  Input,\n  FormControl,\n  FormLabel,\n  Textarea,\n  VStack,\n  Divider,\n  Button,\n} from \"@chakra-ui/react\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nimport ReportInfo from \"./components/ReportInfo\";\nimport Roles from \"./components/Roles\";\n\nexport const App = () => {\n  const [value, setValue] = React.useState(\"\");\n  const [discordTag, setDiscordTag] = React.useState(\"\");\n  const [nickname, setNickname] = React.useState(\"\");\n  const [fecha, setFecha] = React.useState(\"\");\n  const [selectedRoles, setSelectedRoles] = React.useState<string[]>([]);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    let inputValue = e.target.value;\n    setValue(inputValue);\n  };\n\n  const reset = () => {\n    setValue(\"\");\n    setDiscordTag(\"\");\n    setNickname(\"\");\n    setFecha(\"\");\n    setSelectedRoles([]);\n  };\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Box textAlign=\"center\" fontSize=\"xl\">\n        <Grid p={3} height=\"5vh\">\n          <ColorModeSwitcher justifySelf=\"flex-end\" />\n          <Button\n            variant=\"solid\"\n            justifySelf=\"flex-start\"\n            onClick={reset}\n            colorScheme=\"green\"\n          >\n            Reset data\n          </Button>\n        </Grid>\n      </Box>\n      <VStack mb=\"14\">\n        <FormControl id=\"discord\" width=\"50%\">\n          <FormLabel fontWeight=\"bold\" fontSize=\"1.5rem\">\n            Tag de discord\n          </FormLabel>\n          <Input\n            type=\"text\"\n            value={discordTag}\n            onChange={(e) => setDiscordTag(e.target.value)}\n            placeholder=\"User#1234\"\n          />\n        </FormControl>\n        <FormControl id=\"nickname\" width=\"50%\">\n          <FormLabel fontWeight=\"bold\" fontSize=\"1.5rem\">\n            Nickname\n          </FormLabel>\n          <Input\n            type=\"text\"\n            value={nickname}\n            onChange={(e) => setNickname(e.target.value)}\n            onFocus={() => (nickname === \"N/A\" ? setNickname(\"\") : undefined)}\n            placeholder=\"N/A\"\n          />\n        </FormControl>\n        <VStack width=\"50%\" alignItems=\"flex-start\">\n          <Text my=\"8px\" fontWeight=\"bold\" fontSize=\"1.5rem\">\n            Motivo de la sanción\n          </Text>\n          <Textarea\n            value={value}\n            onChange={handleInputChange}\n            placeholder=\"¿Por qué razón esta sancionando al usuario?\"\n            size=\"sm\"\n          />\n        </VStack>\n        <Roles\n          selectedRoles={selectedRoles}\n          setSelectedRoles={setSelectedRoles}\n        />\n        <VStack width=\"50%\" alignItems=\"flex-start\">\n          <FormControl id=\"fecha\" isRequired>\n            <FormLabel fontWeight=\"bold\" fontSize=\"1.5rem\">\n              Fecha en que termina la sanción:\n            </FormLabel>\n            <Input\n              type=\"text\"\n              value={fecha}\n              onChange={(e) => setFecha(e.target.value)}\n            />\n          </FormControl>\n        </VStack>\n      </VStack>\n      <Divider />\n      <Box>\n        <ReportInfo\n          discordTag={discordTag}\n          warnReason={value}\n          nickname={nickname}\n          warnEnd={fecha}\n          roles={selectedRoles}\n        />\n      </Box>\n    </ChakraProvider>\n  );\n};\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n"],"sourceRoot":""}